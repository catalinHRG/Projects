/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proiect.tp.notepad;

import java.awt.Dialog;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDragEvent;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.dnd.DropTargetEvent;
import java.awt.dnd.DropTargetListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.text.BadLocationException;

/**
 *
 * @author Catalin H
 */
public class Voyager extends javax.swing.JFrame {

          /**
           * Creates new form voyager
           */
          public static ClosableTabbedPane copyOfTabContainer;

          public Voyager() {

                    initComponents();
                    copyOfTabContainer = (ClosableTabbedPane) tabContainer;

          }

          /**
           * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
           */
          @SuppressWarnings("unchecked")
          // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
          private void initComponents() {

                    southContainer = new javax.swing.JPanel();
                    statusDisplayComponent = new javax.swing.JTextField();
                    zoomComponent = new javax.swing.JSlider();
                    jPanel1 = new UtillitiesPanel();
                    topContainer = new javax.swing.JInternalFrame();
                    shortcutToolBar = new javax.swing.JToolBar();
                    mainMenuBar = new javax.swing.JMenuBar();
                    fileMenu = new javax.swing.JMenu();
                    newFileMenuItem = new javax.swing.JMenuItem();
                    newProjectMenuItem = new javax.swing.JMenuItem();
                    openFileMenuItem = new javax.swing.JMenuItem();
                    saveAsMenuItem = new javax.swing.JMenuItem();
                    editMenu = new javax.swing.JMenu();
                    undoMenuItem = new javax.swing.JMenuItem();
                    redoMenuItem = new javax.swing.JMenuItem();
                    cutMenuItem = new javax.swing.JMenuItem();
                    copyMenuItem = new javax.swing.JMenuItem();
                    pasteMenuItem = new javax.swing.JMenuItem();
                    centerSplittedContainer = new javax.swing.JSplitPane();
                    tabContainer = new ClosableTabbedPane();
                    leftSplitComponent = new javax.swing.JScrollPane();
                    projectManager = new javax.swing.JTree();

                    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

                    southContainer.setPreferredSize(new java.awt.Dimension(576, 30));
                    southContainer.setLayout(new java.awt.BorderLayout());

                    statusDisplayComponent.setEditable(false);
                    statusDisplayComponent.setPreferredSize(new java.awt.Dimension(150, 30));
                    statusDisplayComponent.addActionListener(new java.awt.event.ActionListener() {
                              public void actionPerformed(java.awt.event.ActionEvent evt) {
                                        statusDisplayComponentActionPerformed(evt);
                              }
                    });
                    southContainer.add(statusDisplayComponent, java.awt.BorderLayout.LINE_END);
                    southContainer.add(zoomComponent, java.awt.BorderLayout.LINE_START);
                    southContainer.add(jPanel1, java.awt.BorderLayout.CENTER);

                    getContentPane().add(southContainer, java.awt.BorderLayout.PAGE_END);

                    topContainer.setBackground(new java.awt.Color(0, 0, 255));
                    topContainer.setVisible(true);

                    shortcutToolBar.setRollover(true);
                    shortcutToolBar.setPreferredSize(new java.awt.Dimension(18, 25));
                    topContainer.getContentPane().add(shortcutToolBar, java.awt.BorderLayout.CENTER);

                    fileMenu.setText("File");

                    newFileMenuItem.setText("New file ...");
                    newFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
                              public void actionPerformed(java.awt.event.ActionEvent evt) {
                                        newFileMenuItemActionPerformed(evt);
                              }
                    });
                    fileMenu.add(newFileMenuItem);

                    newProjectMenuItem.setText("New project ...");
                    newProjectMenuItem.addActionListener(new java.awt.event.ActionListener() {
                              public void actionPerformed(java.awt.event.ActionEvent evt) {
                                        newProjectMenuItemActionPerformed(evt);
                              }
                    });
                    fileMenu.add(newProjectMenuItem);

                    openFileMenuItem.setText("Open file ...");
                    openFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
                              public void actionPerformed(java.awt.event.ActionEvent evt) {
                                        openFileMenuItemActionPerformed(evt);
                              }
                    });
                    fileMenu.add(openFileMenuItem);

                    saveAsMenuItem.setText("Save file as ...");
                    saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
                              public void actionPerformed(java.awt.event.ActionEvent evt) {
                                        saveAsMenuItemActionPerformed(evt);
                              }
                    });
                    fileMenu.add(saveAsMenuItem);

                    mainMenuBar.add(fileMenu);

                    editMenu.setText("Edit");

                    undoMenuItem.setText("Undo");
                    editMenu.add(undoMenuItem);

                    redoMenuItem.setText("Redo");
                    editMenu.add(redoMenuItem);

                    cutMenuItem.setText("Cut");
                    editMenu.add(cutMenuItem);

                    copyMenuItem.setText("Copy");
                    editMenu.add(copyMenuItem);

                    pasteMenuItem.setText("Paste");
                    editMenu.add(pasteMenuItem);

                    mainMenuBar.add(editMenu);

                    topContainer.setJMenuBar(mainMenuBar);

                    getContentPane().add(topContainer, java.awt.BorderLayout.PAGE_START);

                    DropTarget dt = new DropTarget(tabContainer , new DropTargetListener(){
                              @Override
                              public void dragEnter(DropTargetDragEvent dtde) {
                              }

                              @Override
                              public void dragOver(DropTargetDragEvent dtde) {
                              }

                              @Override
                              public void dropActionChanged(DropTargetDragEvent dtde) {
                              }

                              @Override
                              public void dragExit(DropTargetEvent dte) {
                              }

                              @Override
                              public void drop(DropTargetDropEvent dtde) {

                                        try {

                                                  Transferable transferableData = dtde.getTransferable();
                                                  DataFlavor[] flavors = transferableData.getTransferDataFlavors();

                                                  CustomTextArea tabEditor = new CustomTextArea();

                                                  for (int i = 0; i < flavors.length; i++) {

                                                            if (flavors[i].isFlavorJavaFileListType()) {

                                                                      dtde.acceptDrop(DnDConstants.ACTION_COPY);

                                                                      java.util.List list = (java.util.List) transferableData.getTransferData(flavors[i]);

                                                                      FileReader fr = new FileReader((File) list.get(i));
                                                                      BufferedReader br = new BufferedReader(fr);
                                                                      String buffer;

                                                                      while ((buffer = br.readLine()) != null) {

                                                                                tabEditor.append(buffer + "\n");
                                                                      }

                                                                      tabEditor.addCaretListener(new CaretListener() {
                                                                                @Override
                                                                                public void caretUpdate(CaretEvent ce) {
                                                                                          tabEditorCaretUpdate(ce);
                                                                                }

                                                                      });
                                                                      JScrollPane scrollContainer = new JScrollPane(tabEditor);
                                                                      tabContainer.addTab( ( (File)list.get(i) ).getName() , scrollContainer );
                                                                      tabContainer.setSelectedComponent(scrollContainer);
                                                                      dtde.dropComplete(true);
                                                                      return;
                                                            }
                                                  }

                                                  dtde.rejectDrop();

                                        } catch (UnsupportedFlavorException | IOException e) {
                                                  e.printStackTrace();
                                                  dtde.rejectDrop();
                                        }

                              }
                    });

                    centerSplittedContainer.setRightComponent(tabContainer);

                    leftSplitComponent.setPreferredSize(new java.awt.Dimension(150, 100));
                    leftSplitComponent.setViewportView(projectManager);

                    centerSplittedContainer.setLeftComponent(leftSplitComponent);

                    getContentPane().add(centerSplittedContainer, java.awt.BorderLayout.CENTER);

                    pack();
          }// </editor-fold>//GEN-END:initComponents

          private void statusDisplayComponentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusDisplayComponentActionPerformed
                    // TODO add your handling code here:
          }//GEN-LAST:event_statusDisplayComponentActionPerformed

          private void newProjectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newProjectMenuItemActionPerformed
                    // TODO add your handling code here:
          }//GEN-LAST:event_newProjectMenuItemActionPerformed

          private void newFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newFileMenuItemActionPerformed

                    JDialog tabNameChooser = new JDialog();

                    tabNameChooser.setSize(tabContainer.getSize().width / 4, tabContainer.getSize().height / 4);
                    tabNameChooser.setLocation(tabContainer.getLocationOnScreen().x + tabContainer.getWidth() / 3,
                            tabContainer.getLocationOnScreen().y + tabContainer.getHeight() / 3);
                    tabNameChooser.setModalityType(Dialog.ModalityType.APPLICATION_MODAL);

                    JTextField fileName = new JTextField(15);
                    CustomTextArea tabEditor = new CustomTextArea();

                    tabEditor.addCaretListener(new CaretListener() {
                              
                              @Override
                              public void caretUpdate(CaretEvent ce) {
                                        tabEditorCaretUpdate(ce);
                              }

                    });

                    JScrollPane scrollContainer = new JScrollPane(tabEditor);

                    JButton okButton = new JButton("OK !");
                    okButton.addActionListener(new java.awt.event.ActionListener() {

                              @Override
                              public void actionPerformed(java.awt.event.ActionEvent evt) {

                                        tabContainer.addTab(fileName.getText(), scrollContainer);
                                        tabContainer.setSelectedComponent(scrollContainer);
                                        tabNameChooser.dispose();

                              }
                    });

                    JLabel promtLabel = new JLabel();
                    promtLabel.setText("Enter the name for the file ... ");

                    tabNameChooser.setLayout(new GridBagLayout());
                    GridBagConstraints c = new GridBagConstraints();

                    c.gridx = 0;
                    c.gridy = 0;
                    tabNameChooser.add(promtLabel, c);
                    c.gridx = 0;
                    c.gridy = 1;
                    tabNameChooser.add(fileName, c);
                    c.anchor = GridBagConstraints.LINE_START;
                    c.gridx = 2;
                    c.gridy = 1;
                    tabNameChooser.add(okButton, c);

                    tabNameChooser.setVisible(true);

          }//GEN-LAST:event_newFileMenuItemActionPerformed

          private void openFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileMenuItemActionPerformed

                    final javax.swing.JFileChooser openFile = new javax.swing.JFileChooser();

                    if (evt.getSource() == openFileMenuItem) {

                              int selectedStatus = openFile.showOpenDialog(this);

                              if (selectedStatus == openFile.APPROVE_OPTION) {

                                        File content = openFile.getSelectedFile();

                                        try {

                                                  FileReader fr = new FileReader(content);
                                                  BufferedReader br = new BufferedReader(fr);

                                                  CustomTextArea tabEditor = new CustomTextArea();

                                                  String buffer;

                                                  while ((buffer = br.readLine()) != null) {

                                                            tabEditor.append(buffer + "\n");
                                                  }

                                                  br.close();

                                                  tabEditor.addCaretListener(new CaretListener() {
                                                            @Override
                                                            public void caretUpdate(CaretEvent ce) {
                                                                      
                                                                      tabEditorCaretUpdate(ce);
                                                            }

                                                  });
                                                  
                                                  JScrollPane scrollContainer = new JScrollPane(tabEditor);
                                                  tabContainer.addTab(openFile.getName(content), scrollContainer);
                                                  tabContainer.setSelectedComponent(scrollContainer);

                                        } catch (FileNotFoundException ex) {

                                                  Logger.getLogger(Voyager.class.getName()).log(Level.SEVERE, null, ex);

                                        } catch (IOException ex) {

                                                  Logger.getLogger(Voyager.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                              }
                    }
          }//GEN-LAST:event_openFileMenuItemActionPerformed

          private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed

                    javax.swing.JFileChooser saveFileChooser = new javax.swing.JFileChooser();

                    if (evt.getSource() == saveAsMenuItem) {

                              int selectedStatus = saveFileChooser.showSaveDialog(this);

                              if (selectedStatus == saveFileChooser.APPROVE_OPTION) {

                                        try {

                                                  FileWriter fr = new FileWriter(saveFileChooser.getSelectedFile());

                                                  @SuppressWarnings("UnusedAssignment")
                                                  String[] lines;

                                                  int selectedIndex = tabContainer.getSelectedIndex();
                                                  JTextArea temp = (JTextArea) (((JScrollPane) tabContainer.getComponentAt(selectedIndex)).getViewport()).getComponent(0);
                                                  //rightSplitComponent.getComponentCount(); 

                                                  lines = temp.getText().split("\\n");

                                                  PrintWriter pw = new PrintWriter(fr);
                                                  for (int i = 0; i < lines.length; i++) {

                                                            pw.println(lines[i]);
                                                  }
                                                  pw.close();

                                        } catch (IOException ex) {

                                                  Logger.getLogger(Voyager.class.getName()).log(Level.SEVERE, null, ex);
                                        }

                              }
                    }


          }//GEN-LAST:event_saveAsMenuItemActionPerformed

          public void tabEditorCaretUpdate(CaretEvent ce) {

                    JTextArea newEditor = (JTextArea) ce.getSource();

                    int lineNo;
                    int columnNo;

                    try {

                              int caretpos = newEditor.getCaretPosition();

                              lineNo = newEditor.getLineOfOffset(caretpos);

                              columnNo = caretpos - newEditor.getLineStartOffset(lineNo);

                              lineNo += 1;

                              statusDisplayComponent.setText("Line : " + lineNo + " Column : " + columnNo);

                    } catch (BadLocationException ex) {
                              Logger.getLogger(Voyager.class.getName()).log(Level.SEVERE, null, ex);
                    }

          }

          public static void main(String args[]) {
                    /* Set the Nimbus look and feel */
                    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
                    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
                     */
                    try {
                              for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                                        if ("Nimbus".equals(info.getName())) {
                                                  javax.swing.UIManager.setLookAndFeel(info.getClassName());
                                                  break;
                                        }
                              }
                    } catch (ClassNotFoundException ex) {
                              java.util.logging.Logger.getLogger(Voyager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                    } catch (InstantiationException ex) {
                              java.util.logging.Logger.getLogger(Voyager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                    } catch (IllegalAccessException ex) {
                              java.util.logging.Logger.getLogger(Voyager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
                              java.util.logging.Logger.getLogger(Voyager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                    }
                    //</editor-fold>
                    //</editor-fold>

                    /* Create and display the form */
                    java.awt.EventQueue.invokeLater(new Runnable() {
                              @Override
                              public void run() {

                                        Voyager mainFrame = new Voyager();

                                        mainFrame.setExtendedState(Voyager.MAXIMIZED_BOTH);
                                        mainFrame.setVisible(true);
                              }
                    });
          }

          // Variables declaration - do not modify//GEN-BEGIN:variables
          private javax.swing.JSplitPane centerSplittedContainer;
          private javax.swing.JMenuItem copyMenuItem;
          private javax.swing.JMenuItem cutMenuItem;
          private javax.swing.JMenu editMenu;
          private javax.swing.JMenu fileMenu;
          private javax.swing.JPanel jPanel1;
          private javax.swing.JScrollPane leftSplitComponent;
          private javax.swing.JMenuBar mainMenuBar;
          private javax.swing.JMenuItem newFileMenuItem;
          private javax.swing.JMenuItem newProjectMenuItem;
          private javax.swing.JMenuItem openFileMenuItem;
          private javax.swing.JMenuItem pasteMenuItem;
          private javax.swing.JTree projectManager;
          private javax.swing.JMenuItem redoMenuItem;
          private javax.swing.JMenuItem saveAsMenuItem;
          private javax.swing.JToolBar shortcutToolBar;
          private javax.swing.JPanel southContainer;
          private javax.swing.JTextField statusDisplayComponent;
          private javax.swing.JTabbedPane tabContainer;
          private javax.swing.JInternalFrame topContainer;
          private javax.swing.JMenuItem undoMenuItem;
          private javax.swing.JSlider zoomComponent;
          // End of variables declaration//GEN-END:variables
}
